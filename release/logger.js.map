{"version":3,"sources":["logger.js"],"names":["DailyRotateFile","require","generalRotateTransport","level","filename","datePattern","zippedArchive","maxSize","maxFiles","errorRotateTransport","debugRotateTransport","exceptionRotateTransport","on","oldFilename","newFilename","logger","winston","createLogger","format","json","transports","exceptionHandlers","exitOnError","process","env","NODE_ENV","add","Console","simple"],"mappings":";;;;;;;AAEA;;;;AACA,MAAMA,eAAe,GAAGC,OAAO,CAAC,2BAAD,CAA/B;;AAGA,MAAMC,sBAAsB,GAAG,IAAKF,eAAL,CAAsB;AACnDG,EAAAA,KAAK,EAAE,MAD4C;AAEnDC,EAAAA,QAAQ,EAAE,yBAFyC;AAGnDC,EAAAA,WAAW,EAAE,eAHsC;AAInDC,EAAAA,aAAa,EAAE,IAJoC;AAKnDC,EAAAA,OAAO,EAAE,KAL0C;AAMnDC,EAAAA,QAAQ,EAAE;AANyC,CAAtB,CAA/B;AAQA,MAAMC,oBAAoB,GAAG,IAAKT,eAAL,CAAsB;AACjDG,EAAAA,KAAK,EAAE,OAD0C;AAEjDC,EAAAA,QAAQ,EAAE,uBAFuC;AAGjDC,EAAAA,WAAW,EAAE,eAHoC;AAIjDC,EAAAA,aAAa,EAAE,IAJkC;AAKjDC,EAAAA,OAAO,EAAE,KALwC;AAMjDC,EAAAA,QAAQ,EAAE;AANuC,CAAtB,CAA7B;AAQA,MAAME,oBAAoB,GAAG,IAAKV,eAAL,CAAsB;AACjDG,EAAAA,KAAK,EAAE,OAD0C;AAEjDC,EAAAA,QAAQ,EAAE,uBAFuC;AAGjDC,EAAAA,WAAW,EAAE,eAHoC;AAIjDC,EAAAA,aAAa,EAAE,IAJkC;AAKjDC,EAAAA,OAAO,EAAE,KALwC;AAMjDC,EAAAA,QAAQ,EAAE;AANuC,CAAtB,CAA7B;AAQA,MAAMG,wBAAwB,GAAG,IAAKX,eAAL,CAAsB;AACrDI,EAAAA,QAAQ,EAAE,2BAD2C;AAErDC,EAAAA,WAAW,EAAE,eAFwC;AAGrDC,EAAAA,aAAa,EAAE,IAHsC;AAIrDC,EAAAA,OAAO,EAAE,KAJ4C;AAKrDC,EAAAA,QAAQ,EAAE;AAL2C,CAAtB,CAAjC;AAQAN,sBAAsB,CAACU,EAAvB,CAA0B,QAA1B,EAAoC,UAASC,WAAT,EAAsBC,WAAtB,EAAmC,CACtE,CADD;;AAIO,MAAMC,MAAM,GAAGC,iBAAQC,YAAR,CAAqB;AACzCd,EAAAA,KAAK,EAAE,MADkC;AAEzCe,EAAAA,MAAM,EAAEF,iBAAQE,MAAR,CAAeC,IAAf,EAFiC;AAGzCC,EAAAA,UAAU,EAAE,CACV;AACA;AACA;AACA;AACAV,EAAAA,oBALU,EAMVD,oBANU,EAOVP,sBAPU,CAH6B;AAYzCmB,EAAAA,iBAAiB,EAAE,CACjBV,wBADiB,CAZsB;AAezCW,EAAAA,WAAW,EAAE;AAf4B,CAArB,CAAf,C,CAkBP;AACA;AACA;AACA;;;;;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCV,EAAAA,MAAM,CAACW,GAAP,CAAW,IAAIV,iBAAQI,UAAR,CAAmBO,OAAvB,CAA+B;AACxCT,IAAAA,MAAM,EAAEF,iBAAQE,MAAR,CAAeU,MAAf;AADgC,GAA/B,CAAX;AAGD","sourcesContent":["// @flow\n\nimport winston from 'winston';\nconst DailyRotateFile = require('winston-daily-rotate-file');\n\n\nconst generalRotateTransport = new (DailyRotateFile)({\n  level: 'info',\n  filename: 'logs/general-%DATE%.log',\n  datePattern: 'YYYY-MM-DD-HH',\n  zippedArchive: true,\n  maxSize: '20m',\n  maxFiles: '14d'\n});\nconst errorRotateTransport = new (DailyRotateFile)({\n  level: 'error',\n  filename: 'logs/error-%DATE%.log',\n  datePattern: 'YYYY-MM-DD-HH',\n  zippedArchive: true,\n  maxSize: '20m',\n  maxFiles: '14d'\n});\nconst debugRotateTransport = new (DailyRotateFile)({\n  level: 'debug',\n  filename: 'logs/debug-%DATE%.log',\n  datePattern: 'YYYY-MM-DD-HH',\n  zippedArchive: true,\n  maxSize: '20m',\n  maxFiles: '14d'\n});\nconst exceptionRotateTransport = new (DailyRotateFile)({\n  filename: 'logs/exception-%DATE%.log',\n  datePattern: 'YYYY-MM-DD-HH',\n  zippedArchive: true,\n  maxSize: '20m',\n  maxFiles: '14d'\n});\n\ngeneralRotateTransport.on('rotate', function(oldFilename, newFilename) {\n});\n\n\nexport const logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.json(),\n  transports: [\n    //\n    // - Write to all logs with level `info` and below to `combined.log`\n    // - Write all logs error (and below) to `error.log`.\n    //\n    debugRotateTransport,\n    errorRotateTransport,\n    generalRotateTransport\n  ],\n  exceptionHandlers: [\n    exceptionRotateTransport\n  ],\n  exitOnError: false\n});\n\n//\n// If we're not in production then log to the `console` with the format:\n// `${info.level}: ${info.message} JSON.stringify({ ...rest }) `\n//\nif (process.env.NODE_ENV !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple()\n  }));\n}\n"],"file":"logger.js"}