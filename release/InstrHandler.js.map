{"version":3,"sources":["InstrHandler.js"],"names":["debug","require","sleep","promisify","setTimeout","bcm2835I2CReasonCodes","BCM2835_I2C_REASON_OK","BCM2835_I2C_REASON_ERROR_NACK","BCM2835_I2C_REASON_ERROR_CLKT","BCM2835_I2C_REASON_ERROR_DATA","InstructionHandler","constructor","dbPath","process","env","DB_PATH","mkdirp","sync","db","PouchDB","path","join","viewVersion","views","storedInstr","listNames","map","doc","name","_id","startsWith","emit","toString","setup","then","catch","err","query","view","params","namespace","split","ret","Error","status","put","subError","setupViewsForQuery","version","removeViews","curr","get","_rev","allViews","allDocs","startkey","endkey","k","rows","id","remove","error","rpio","open","RED_LED_PIN","OUTPUT","LOW","GREEN_LED_PIN","instructions","getStoredInstructionSet","resp","executeInstructions","updateLastNamedInstructionExec","write","HIGH","dbNamedInstrLastExecId","dbInstrId","instructionResponse","newObj","getNamesOfInstructionSets","queryResp","e","key","addStoredInstructionSet","length","instr","getStoredInstructionSetLog","otherKeys","execStoredInstructionSet","instResp","success","beginTime","Date","toISOString","completeTime","Array","fill","val","index","keys","returnValue","logger","info","func","r","message","mode","pud","v","read","pin","buff","writebuf","pwmSetClockDivider","pwmSetRange","pwmSetData","i2cBegin","i2cSetSlaveAddress","i2cSetBaudRate","i2cRead","i2cWrite","reg","mask","value","readBuf","Buffer","alloc","newValue","i","writeUInt8","readUInt8","concat","i2cEnd","spiBegin","spiChipSelect","spiSetCSPolarity","spiSetClockDivider","spiSetDataMode","writeBuf","spiTransfer","spiWrite","spiEnd","msleep","isBuffer","instructionHandler"],"mappings":"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","sourcesContent":["//@flow\nimport type {Instructions, InstructionsResponse, InstructionResponse} from './types';\nimport {\n   RED_LED_PIN, GREEN_LED_PIN, parseLed,\n   parseInstructions, parseOpen, parseMode, parseRead, parseWrite,\n   parseReadBuf, parseWriteBuf, parsePud,\n   parsePwmClockDivider, parsePwmRange, parsePwmData,\n   parseI2cSetSlaveAddress, parseI2cSetBaudrate, parseI2cRead, parseI2cWrite, parseI2cUpdateReg,\n   parseSpiSetCSPolarity, parseSpiSetClockDivider, parseSpiSetDataMode, parseSpiTransfer, parseSpiWrite,\n   parseSleep, parseMSleep,\n   validInstructionSetName, parseStored\n} from './util/parsers';\nimport { logger } from './logger';\nimport rpio from 'rpio'\nimport PouchDB from 'pouchdb'\nimport mkdirp from 'mkdirp';\nimport path from 'path';\n\nconst debug = require('debug')('instr:handler');\nconst sleep = require('util').promisify(setTimeout)\n\n\nconst bcm2835I2CReasonCodes = {\n  BCM2835_I2C_REASON_OK : 0x00,\n  BCM2835_I2C_REASON_ERROR_NACK : 0x01,\n  BCM2835_I2C_REASON_ERROR_CLKT : 0x02,\n  BCM2835_I2C_REASON_ERROR_DATA : 0x04\n}\n\nexport class InstructionHandler {\n  db: PouchDB;\n  views: {};\n  viewVersion: ?number;\n  constructor() {\n    const dbPath = process.env.DB_PATH || '/data/db'\n    mkdirp.sync(dbPath);\n    this.db = new PouchDB(`${path.join(dbPath, 'instr')}`);\n    this.viewVersion = null;\n    this.views = {\n      storedInstr: {\n        listNames: {\n          map: function (doc) {\n            if(doc.name && doc._id.startsWith('instrSet_')) {\n              emit(doc.name, doc._id);\n            }\n          }.toString()\n        }\n      }\n    };\n    this.setup().then(() => {\n\n    }).catch((err) => {\n\n    })\n  }\n  async query(view: string, params: ?{}) : Promise<any> {\n    const namespace = view.split('/')[0]\n    try {\n      const ret = await this.db.query(view, params)\n      return ret;\n    } catch(err) {\n      if (!this.views[namespace]) {\n        throw new Error(`View ${namespace} is not defined.`)\n      }\n      // if view doesn't exist, create it, and try again\n      if (err.status === 404) {\n        try {\n          await this.db.put({\n            _id: `_design/${namespace}`,\n            views: this.views[namespace]\n          });\n          return await this.db.query(view, params)\n        } catch(subError) {\n          throw subError;\n        }\n      }\n    }\n  }\n  async setupViewsForQuery() {\n    let viewVersion: {_id: string, version: number, _rev?: string} = {_id: 'instrViewsVersion', version: 4};\n    let removeViews = false;\n    if(this.viewVersion === null) {\n      try {\n        const curr = await this.db.get(viewVersion._id);\n        if(curr.version !== viewVersion.version) {\n          viewVersion._rev = curr._rev;\n          removeViews = true;\n          await this.db.put(viewVersion);\n        }\n      } catch(err) {\n        try {\n          await this.db.put(viewVersion);\n        } catch(subError) {\n          //ignore\n        }\n      }\n    }\n    this.viewVersion = viewVersion.version;\n    if(removeViews) {\n      const allViews = await this.db.allDocs({startkey: '_design/', endkey: '_design/\\uffff'});\n      for(const k of allViews.rows) {\n        try {\n          const doc = await this.db.get(k.id);\n          await this.db.remove(doc);\n        } catch(error) {\n          //ignore\n        }\n      }\n    }\n  }\n  async setup() {\n    await this.setupViewsForQuery();\n    try {\n      rpio.open(RED_LED_PIN, rpio.OUTPUT, rpio.LOW);\n      rpio.open(GREEN_LED_PIN, rpio.OUTPUT, rpio.LOW);\n      const instructions = await this.getStoredInstructionSet(`initialize`);\n      const resp = await this.executeInstructions(instructions);\n      await this.updateLastNamedInstructionExec(`initialize`, resp);\n      rpio.write(RED_LED_PIN, rpio.HIGH);\n      await sleep(1000);\n      rpio.write(RED_LED_PIN, rpio.LOW);\n    } catch(error) {\n      //No initialize instruction set\n    }\n\n  }\n  dbNamedInstrLastExecId(name: string) {\n    return `instrNamedExec_${name}`\n  }\n  dbInstrId(name: string) {\n    return `instrSet_${name}`;\n  }\n  /*\n  Log the last occurence of each named set execution\n  */\n  async updateLastNamedInstructionExec(name: string, instructionResponse: InstructionsResponse) : Promise<boolean> {\n    if(!validInstructionSetName(name)) {\n      return false;\n    }\n    let newObj: {_id: string, name: string, _rev?: string, resp?: InstructionsResponse} = {_id: this.dbNamedInstrLastExecId(name), name};\n    try {\n      const doc = await this.db.get(newObj._id);\n      newObj._rev = doc._rev;\n    } catch (err) {\n      //does not exist\n    }\n    newObj.resp = instructionResponse;\n    try {\n      const doc = await this.db.put(newObj);\n    } catch (err) {\n      //Ignore errors here, should still be able to work without updating instr logs\n      return false;\n      //throw new Error(`Cannot store last executed instruction set response for name ${name}`);\n    }\n    return true;\n  }\n  async getNamesOfInstructionSets(): Promise<Array<string>> {\n    try {\n      //allDocs works also, need to parse .rows*.doc.name\n      //const allResp = await this.db.allDocs({startkey: 'instrSet_', endkey: 'instrSet_\\uffff', 'include_docs': true});\n      const queryResp = await this.query('storedInstr/listNames');\n      return queryResp.rows.map(e => e.key);\n    } catch (err) {\n      //does not exist\n      throw new Error(`Could not load stored instruction sets`);\n    }\n  }\n  async addStoredInstructionSet(name: string, instructions: Array<{func: string}>): Promise<boolean> {\n    if(!validInstructionSetName(name)) {\n      throw new Error(`Invalid instruction set name ${name}. Make sure > 6 characters < 32.`)\n    }\n    if(instructions.length > 400) {\n      throw new Error(`Instruction count is greater than ${400}.`)\n    }\n    if(instructions.length == 0) {\n      throw new Error(`Instruction count is equal to ${0}.`)\n    }\n    let newObj: {_id: string, name: string, _rev?: string, instr?: Array<{func: string}> } = {_id: this.dbInstrId(name), name};\n    try {\n      const doc = await this.db.get(newObj._id);\n      newObj._rev = doc._rev;\n    } catch (err) {\n      //does not exist\n    }\n    newObj.instr = instructions;\n    try {\n      const doc = await this.db.put(newObj);\n    } catch (err) {\n      throw new Error(`Cannot store instruction set for name ${name}`);\n    }\n    return true;\n  }\n  async getStoredInstructionSet(name: string): Promise<Array<{func: string}>>  {\n    if(!validInstructionSetName(name)) {\n      throw new Error(`Invalid instruction set name ${name}. `)\n    }\n    try {\n      const doc = await this.db.get(this.dbInstrId(name));\n      if(!doc.instr) {\n        throw new Error(`Instructions not found in set`);\n      }\n      return doc.instr;\n    } catch (err) {\n      //does not exist\n      throw new Error(`Cannot find instruction set for name ${name}`);\n    }\n  }\n  async getStoredInstructionSetLog(name: string): Promise<InstructionsResponse | null>  {\n    if(!validInstructionSetName(name)) {\n      throw new Error(`Invalid instruction set name ${name}. `)\n    }\n    try {\n      const doc = await this.db.get(this.dbInstrId(name));\n    } catch(error) {\n      throw new Error(`Cannot find instruction set for name ${name}`);\n    }\n    try {\n      const doc = await this.db.get(this.dbNamedInstrLastExecId(name));\n      const {resp, ...otherKeys} = doc;\n      return resp;\n    } catch (err) {\n      //Does not exist\n      return null;\n    }\n  }\n  async execStoredInstructionSet(name: string): Promise<InstructionsResponse> {\n    let resp = null;\n    try {\n      const instructions = await this.getStoredInstructionSet(name);\n      resp = await this.executeInstructions(instructions);\n    } catch(err) {\n      throw err;\n    }\n    try {\n      await this.updateLastNamedInstructionExec(name, resp);\n    } catch(err) {\n      //ignore\n    }\n    return resp;\n  }\n\n  async executeInstructions(instructions: Array<{func: string}>): Promise<InstructionsResponse> {\n    let instResp : InstructionsResponse = {\n      success: true,\n      beginTime: new Date().toISOString(),\n      completeTime: new Date().toISOString(),\n      instructions: new Array(instructions.length).fill().map((val, index) : InstructionResponse => ({\n        success: false,\n        index\n      }))\n    }\n    for(const k of instructions.keys()) {\n      let returnValue: any = null;\n      const instr = instructions[k];\n      let error : Error | null = null;\n      logger.info(`executing ${instr.func}`);\n      switch (instr.func) {\n        case 'stored': {\n          const r = parseStored(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              const [name] = r;\n              const resp = await this.execStoredInstructionSet(name);\n              returnValue = resp;\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n          break;\n        }\n        case 'led': {\n          const r = parseLed(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              rpio.write(...r);\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n          break;\n        }\n        case 'open': {\n          const r = parseOpen(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              rpio.open(...r);\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n          break;\n        }\n        case 'mode': {\n          const r = parseMode(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              rpio.mode(...r);\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n        break;\n        }\n        case 'pud': {\n          const r = parsePud(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              rpio.pud(...r);\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n        break;\n        }\n        case 'read': {\n          const r = parseRead(instr);\n          let v = 0;\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              v = rpio.read(...r);\n              returnValue = v;\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n        break;\n        }\n        case 'readBuf': {\n          const r = parseReadBuf(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              let [pin, buff] = r;\n              returnValue = buff;\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n        break;\n        }\n        case 'write': {\n          const r = parseWrite(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              rpio.write(...r);\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n        break;\n        }\n        case 'writeBuf': {\n          const r = parseWriteBuf(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              rpio.writebuf(...r);\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n        break;\n        }\n        case 'pwmSetClockDivider': {\n          const r = parsePwmClockDivider(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              rpio.pwmSetClockDivider(...r);\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n        break;\n        }\n        case 'pwmSetRange': {\n          const r = parsePwmRange(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              rpio.pwmSetRange(...r);\n            } catch(e) {\n              error = Error(`${instr.func}: Ensure correct pins 16 or 18 and value`);\n            }\n          }\n        break;\n        }\n        case 'pwmSetData': {\n          const r = parsePwmData(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              rpio.pwmSetData(...r);\n            } catch(e) {\n              error = Error(`${instr.func}: Ensure correct pins 16 or 18 and value`);\n            }\n          }\n        break;\n        }\n        case 'i2cBegin': {\n          try {\n            const ret = rpio.i2cBegin();\n            if(typeof ret !== 'undefined' && ret !== 1) {\n              error = Error(`${instr.func}: Error setting up i2c`);\n            }\n          } catch(e) {\n            error = Error(`${instr.func}: Error executing ${e.message}`);\n          }\n        break;\n        }\n        case 'i2cSetSlaveAddress': {\n          const r = parseI2cSetSlaveAddress(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              rpio.i2cSetSlaveAddress(...r);\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n        break;\n        }\n        case 'i2cSetBaudRate': {\n          const r = parseI2cSetBaudrate(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              rpio.i2cSetBaudRate(...r);\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n        break;\n        }\n        case 'i2cRead': {\n          const r = parseI2cRead(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              let [buff] = r;\n              const ret = rpio.i2cRead(...r);\n              if(typeof ret !== 'undefined' && ret !== bcm2835I2CReasonCodes.BCM2835_I2C_REASON_OK) {\n                error = Error(`${instr.func}: Error executing i2c read with code ${ret}`);\n              } else {\n                returnValue = buff;\n              }\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n        break;\n        }\n        case 'i2cWrite': {\n          const r = parseI2cWrite(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              const ret = rpio.i2cWrite(...r);\n              if(typeof ret !== 'undefined' && ret !== bcm2835I2CReasonCodes.BCM2835_I2C_REASON_OK) {\n                error = Error(`${instr.func}: Error executing i2c write with code ${ret}`);\n              }\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n        break;\n        }\n        case 'i2cUpdateReg': {\n          const r = parseI2cUpdateReg(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            const [reg, mask, value] = r;\n            let readBuf = Buffer.alloc(value.length);\n            let newValue = Buffer.alloc(value.length);\n            try {\n              let ret = rpio.i2cWrite(reg);\n              if(typeof ret !== 'undefined' && ret !== bcm2835I2CReasonCodes.BCM2835_I2C_REASON_OK) {\n                error = Error(`${instr.func}: Error executing i2c write with code ${ret}`);\n                break;\n              }\n              ret = rpio.i2cRead(readBuf);\n              if(typeof ret !== 'undefined' && ret !== bcm2835I2CReasonCodes.BCM2835_I2C_REASON_OK) {\n                error = Error(`${instr.func}: Error executing i2c read with code ${ret}`);\n                break;\n              }\n              for(let i = 0; i < value.length; i++) {\n                newValue.writeUInt8((readBuf.readUInt8(i) & ~mask.readUInt8(i)) | (value.readUInt8(i) & mask.readUInt8(i)), i);\n              }\n              ret = rpio.i2cWrite(Buffer.concat([reg, newValue]));\n              if(typeof ret !== 'undefined' && ret !== bcm2835I2CReasonCodes.BCM2835_I2C_REASON_OK) {\n                error = Error(`${instr.func}: Error executing i2c write with code ${ret}`);\n              } else {\n                returnValue = newValue;\n              }\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n        break;\n        }\n        case 'i2cEnd': {\n          try {\n            rpio.i2cEnd();\n          } catch(e) {\n            error = Error(`${instr.func}: Error executing ${e.message}`);\n          }\n        break;\n        }\n        case 'spiBegin': {\n          try {\n            const ret = rpio.spiBegin();\n            if(typeof ret !== 'undefined' && ret !== 1) {\n              error = Error(`${instr.func}: Error setting up spi`);\n            }\n            rpio.spiChipSelect(0); //only one possible with board\n          } catch(e) {\n            error = Error(`${instr.func}: Error executing ${e.message}`);\n          }\n        break;\n        }\n        case 'spiSetCSPolarity': {\n          const r = parseSpiSetCSPolarity(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              rpio.spiSetCSPolarity(...r);\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n        break;\n        }\n        case 'spiSetClockDivider': {\n          const r = parseSpiSetClockDivider(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              rpio.spiSetClockDivider(...r);\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n        break;\n        }\n        case 'spiSetDataMode': {\n          const r = parseSpiSetDataMode(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              rpio.spiSetDataMode(...r);\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n        break;\n        }\n        case 'spiTransfer': {\n          const r = parseSpiTransfer(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              const [writeBuf] = r;\n              let readBuf = Buffer.alloc(writeBuf.length);\n              rpio.spiTransfer(writeBuf, readBuf, writeBuf.length);\n              returnValue = readBuf;\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n        break;\n        }\n        case 'spiWrite': {\n          const r = parseSpiWrite(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              const [writeBuf] = r;\n              rpio.spiWrite(writeBuf, writeBuf.length);\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n        break;\n        }\n        case 'spiEnd': {\n          try {\n            rpio.spiEnd();\n          } catch(e) {\n            error = Error(`${instr.func}: Error executing ${e.message}`);\n          }\n        break;\n        }\n        case 'sleep': {\n          const r = parseSleep(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              rpio.sleep(...r);\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n        break;\n        }\n        case 'msleep': {\n          const r = parseMSleep(instr);\n          if(r instanceof Error) {\n            error = Error(`${instr.func}: ${r.message}`);\n          } else {\n            try {\n              rpio.msleep(...r);\n            } catch(e) {\n              error = Error(`${instr.func}: Error executing ${e.message}`);\n            }\n          }\n        break;\n        }\n      }\n      if(error) {\n        instResp.success = false;\n        instResp.instructions[k].error = error.message;\n        break;\n      } else {\n        instResp.instructions[k].success = true;\n        if(returnValue !== null) {\n          if(Buffer.isBuffer(returnValue)) {\n            instResp.instructions[k].returnValue = returnValue.toString('base64');\n          } else {\n            instResp.instructions[k].returnValue = returnValue;\n          }\n        }\n      }\n    } //end for instructions\n    instResp.completeTime = new Date().toISOString();\n    return instResp;\n\n  }\n}\nconst instructionHandler = new InstructionHandler();\nexport default instructionHandler;\n"],"file":"InstrHandler.js"}