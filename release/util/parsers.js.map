{"version":3,"sources":["util/parsers.js"],"names":["RED_LED_PIN","GREEN_LED_PIN","validSentPins","Map","validInstructionSetName","name","length","match","validOutput","option","retValue","toUpperCase","rpio","HIGH","LOW","Error","validInput","PULL_DOWN","PULL_UP","PULL_OFF","validOption","mode","INPUT","OUTPUT","r","validMode","PWM","validPin","pin","physPin","get","validLed","led","checkVal","toLowerCase","modeToRPIO","isObject","obj","Object","validBase64Buffer","input","min","max","origLength","Buffer","from","error","validStringInteger","num","pNum","parseInt","NaN","validInteger","Number","isInteger","parseInstructions","Array","isArray","every","instr","func","parseStoredInstructions","parseSleep","ret","value","arg1","undefined","parseMSleep","parseSpiSetCSPolarity","parseSpiSetClockDivider","parseSpiSetDataMode","parseSpiTransfer","buffer","parseSpiWrite","parseI2cUpdateReg","reg","mask","arg2","arg3","parseI2cWrite","parseI2cRead","alloc","parseI2cSetBaudrate","parseI2cSetSlaveAddress","parsePwmData","parsePwmRange","parsePwmClockDivider","parseWriteBuf","parseReadBuf","parseRead","parseLed","output","parseWrite","parseMode","parsePud","parseOpen","m","parseStored"],"mappings":"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","sourcesContent":["//@flow\nimport type { PinMode, Pin } from '../types'\nimport rpio from 'rpio'\nimport isBase64 from 'is-base64'\n\nexport type PinModeRPIO = rpio.INPUT | rpio.OUTPUT | rpio.PWM;\nexport type PinInputModePullupRPIO = rpio.PULL_DOWN | rpio.PULL_UP | rpio.PULL_OFF;\nexport type PinOutputValueRPIO = rpio.HIGH | rpio.LOW;\nexport type PinOptionRPIO = PinInputModePullupRPIO | PinOutputValueRPIO;\nexport type ValidMappedPin = 5 | 3 | 21 | 23 | 19 | 24 | 8 | 29 | 10 | 31 | 12 | 35 | 33;\n\nexport const RED_LED_PIN = 36;\nexport const GREEN_LED_PIN = 40;\n\nexport type ValidLedPin = 36 | 40;\n\nconst validSentPins = new Map([[1, 5], [3, 3], [5, 21], [7, 23], [8, 19], [9, 24], [12, 8], [13, 29], [14, 10], [15, 31], [16, 12], [17, 35], [18, 33]]);\nexport function validInstructionSetName(name: string): boolean {\n  if(name.length < 32 && name.length > 6 && name.match(/^[a-zA-Z0-9_]+$/)) {\n    return true\n  }\n  return false;\n}\n\nfunction validOutput(option: any): PinOutputValueRPIO | Error {\n  let retValue: PinOutputValueRPIO | null = null;\n  if(typeof option === 'string') {\n    option = option.toUpperCase();\n    switch (option) {\n      case 'HIGH':\n        retValue = rpio.HIGH;\n        break;\n      case 'LOW':\n        retValue = rpio.LOW;\n        break;\n    }\n    if(retValue !== null) {\n        return retValue;\n    }\n  }\n  if(typeof option === 'number') {\n    switch (option) {\n      case 1:\n        retValue = rpio.HIGH;\n        break;\n      case 0:\n        retValue = rpio.LOW;\n        break;\n    }\n    if(retValue !== null) {\n        return retValue;\n    }\n  }\n  return Error(`No valid option HIGH/1 or LOW/0 passed`);\n}\nfunction validInput(option: any): PinInputModePullupRPIO | Error {\n  let retValue: PinInputModePullupRPIO | null = null;\n  if(typeof option === 'string') {\n    option = option.toUpperCase();\n    switch (option) {\n      case 'PULL_DOWN':\n        retValue = rpio.PULL_DOWN;\n        break;\n      case 'PULL_UP':\n        retValue = rpio.PULL_UP;\n        break;\n      case 'PULL_OFF':\n        retValue = rpio.PULL_OFF;\n        break;\n    }\n    if(retValue !== null) {\n      return retValue;\n    }\n  }\n  return Error(`No valid option PULL_UP or PULL_DOWN passed`);\n}\nfunction validOption(option: any, mode: PinModeRPIO | null = null): PinOptionRPIO | null {\n  if(mode !== null && mode === rpio.INPUT) {\n    return validInput(option);\n  } else if(mode !== null && mode === rpio.OUTPUT) {\n    return validOutput(option);\n  }\n  const r = validInput(option);\n  if(r instanceof Error === false) {\n    return r;\n  }\n  return validOutput(option);\n}\nfunction validMode(mode: any): PinModeRPIO | Error {\n  if(typeof mode === 'string') {\n    mode = mode.toUpperCase();\n    switch (mode) {\n      case 'INPUT':\n        return rpio.INPUT;\n      case 'OUTPUT':\n        return rpio.OUTPUT;\n      case 'PWM':\n        return rpio.PWM;\n    }\n  }\n  return Error(`Incorrect mode specified. Need INPUT, OUTPUT, PWM`);\n}\nfunction validPin(pin: any): ValidMappedPin | Error {\n  if(typeof pin === 'number') {\n    const physPin = validSentPins.get(pin)\n    if(typeof physPin !== 'undefined') {\n      return physPin;\n    }\n  }\n  return Error(`Incorrect pin value specified`);\n}\nfunction validLed(led: any): ValidLedPin | Error {\n  if(typeof led === 'string') {\n    const checkVal = led.toLowerCase();\n    if(checkVal === 'red') {\n      return RED_LED_PIN;\n    } else if(checkVal === 'green') {\n      return GREEN_LED_PIN;\n    }\n  }\n  return Error(`Incorrect led value specified. Need red or green.`);\n}\nfunction modeToRPIO(mode: PinMode): PinModeRPIO {\n  switch (mode) {\n    case 'INPUT':\n      return rpio.INPUT;\n    case 'OUTPUT':\n      return rpio.OUTPUT;\n    case 'PWM':\n      return rpio.PWM;\n  }\n}\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\nexport function validBase64Buffer(input : any, min: number, max: number): Buffer | Error {\n  if(typeof input === 'string' && isBase64(input)) {\n    const origLength = input.length * (3/4);\n    if(origLength >= min && origLength <= max) {\n      try {\n        return Buffer.from(input, 'base64');\n      } catch(error) {\n        return Error(`Invalid data format. Needs to be base64 string`);\n      }\n    }\n    return Error(`Argument is not valid base64 string with length in range from ${min} to ${max}`);\n  }\n  return Error(`Invalid data format. Needs to be base64 string`);\n}\nexport function validStringInteger(num : any, min: number, max: number): number | Error {\n  if(typeof num === 'string') {\n    const pNum = parseInt(num);\n    if(pNum !== NaN && pNum >= min && pNum <= max) {\n      return pNum;\n    }\n  }\n  return Error(`Argument is not valid String Integer in range ${min} to ${max}`);\n}\nexport function validInteger(num : any, min: number, max: number): number | Error {\n  if(typeof num === 'number' && Number.isInteger(num) && num >= min && num <= max) {\n    return num;\n  }\n  return Error(`Argument is not valid integer in range ${min} to ${max}`);\n}\nexport function parseInstructions(input: any): boolean {\n  if(Array.isArray(input) === false) {\n    return false;\n  }\n  return input.every((instr) => { return instr.func && typeof instr.func === 'string' });\n}\n//This also makes sure that there are no nested stored instructions that could cause infinite recursion\nexport function parseStoredInstructions(input: any): boolean {\n  if(Array.isArray(input) === false) {\n    return false;\n  }\n  return input.every((instr) => { return instr.func && typeof instr.func === 'string' && instr.func !== 'stored' });\n}\n\n//Sleep parsing\nexport function parseSleep(input: any): [number] | Error {\n  let ret = null, value: number | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    const ret = validInteger(input.arg1, 1, 5);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    value = ret;\n  } else {\n    return Error(`Missing arg1`);\n  }\n  return [value];\n}\nexport function parseMSleep(input: any): [number] | Error {\n  let ret = null, value: number | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    const ret = validInteger(input.arg1, 1, 5000);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    value = ret;\n  } else {\n    return Error(`Missing arg1`);\n  }\n  return [value];\n}\n\n//SPI parsing\nexport function parseSpiSetCSPolarity(input: any): [0, PinOutputValueRPIO] | Error {\n  let ret = null, value : PinOutputValueRPIO | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    const ret = validOutput(input.arg1);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    value = ret;\n  } else {\n    return Error(`Missing arg1`);\n  }\n  return [0, value];\n\n}\nexport function parseSpiSetClockDivider(input: any): [number] | Error {\n  let ret = null, value: number | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    const ret = validInteger(input.arg1, 1, 65536);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    value = ret;\n  } else {\n    return Error(`Missing arg1`);\n  }\n  return [value];\n}\n\nexport function parseSpiSetDataMode(input: any): [number] | Error {\n  let ret = null, value: number | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    const ret = validInteger(input.arg1, 0, 3);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    value = ret;\n  } else {\n    return Error(`Missing arg1`);\n  }\n  return [value];\n}\nexport function parseSpiTransfer(input: any): [Buffer] | Error {\n  let ret = null, buffer: Buffer | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    const ret = validBase64Buffer(input.arg1, 1, 64000);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    buffer = ret;\n  } else {\n    return Error(`Missing arg1`);\n  }\n  return [buffer];\n}\nexport function parseSpiWrite(input: any): [Buffer] | Error {\n  let ret = null, buffer: Buffer | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    const ret = validBase64Buffer(input.arg1, 1, 64000);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    buffer = ret;\n  } else {\n    return Error(`Missing arg1`);\n  }\n  return [buffer];\n}\n\n\n// I2c Parsing\nexport function parseI2cUpdateReg(input: any): [Buffer, Buffer, Buffer] | Error {\n  let ret = null, reg: Buffer | null, mask: Buffer | null = null, value: Buffer | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    const ret = validBase64Buffer(input.arg1, 1, 4);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    reg = ret;\n  } else {\n    return Error(`Missing arg1`);\n  }\n  if(input.arg2 !== undefined) {\n    const ret = validBase64Buffer(input.arg2, 1, 8);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    mask = ret;\n  } else {\n    return Error(`Missing arg2`);\n  }\n  if(input.arg3 !== undefined) {\n    const ret = validBase64Buffer(input.arg3, 1, 8);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    value = ret;\n  } else {\n    return Error(`Missing arg3`);\n  }\n  if(mask.length !== value.length) {\n    return Error(`Mask and Value are not the same number of bytes`);\n  }\n  return [reg, mask, value];\n}\nexport function parseI2cWrite(input: any): [Buffer] | Error {\n  let ret = null, buffer: Buffer | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    const ret = validBase64Buffer(input.arg1, 1, 64000);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    buffer = ret;\n  } else {\n    return Error(`Missing arg1`);\n  }\n  return [buffer];\n}\nexport function parseI2cRead(input: any): [Buffer] | Error {\n  let ret = null, buffer: Buffer | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    const ret = validInteger(input.arg1, 1, 64000);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    buffer = Buffer.alloc(ret);\n  } else {\n    return Error(`Missing arg1`);\n  }\n  return [buffer];\n}\nexport function parseI2cSetBaudrate(input: any): [number] | Error {\n  let ret = null, value: number | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(typeof input.arg1 === 'number') {\n    const ret = validInteger(input.arg1, 1000, 1000000);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    value = ret;\n  } else if(typeof input.arg1 === 'string') {\n    const ret = validStringInteger(input.arg1, 1000, 1000000);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    value = ret;\n  } else {\n    return Error(`Missing arg1`);\n  }\n  return [value];\n}\nexport function parseI2cSetSlaveAddress(input: any): [number] | Error {\n  let ret = null, value: number | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(typeof input.arg1 === 'number') {\n    const ret = validInteger(input.arg1, 0, 0x7F);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    value = ret;\n  } else if(typeof input.arg1 === 'string') {\n    const ret = validStringInteger(input.arg1, 0, 0x7F);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    value = ret;\n  } else {\n    return Error(`Missing arg1`);\n  }\n  return [value];\n}\n// PWM Parsing\nexport function parsePwmData(input: any): [ValidMappedPin, number] | Error {\n  let ret = null, pin: ValidMappedPin | null = null, value: number | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    ret = validPin(input.arg1);\n  } else {\n    return Error(`Missing arg1`);\n  }\n  if(ret instanceof Error) {\n    return ret;\n  }\n  pin = ret;\n  if(input.arg2 !== undefined) {\n    const ret = validInteger(input.arg2, 1, 4096);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    value = ret;\n  } else {\n    return Error(`Missing arg2`);\n  }\n  return [pin, value];\n}\nexport function parsePwmRange(input: any): [ValidMappedPin, number] | Error {\n  let ret = null, pin: ValidMappedPin | null = null, value: number | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    ret = validPin(input.arg1);\n  } else {\n    return Error(`Missing arg1`);\n  }\n  if(ret instanceof Error) {\n    return ret;\n  }\n  pin = ret;\n  if(input.arg2 !== undefined) {\n    const ret = validInteger(input.arg2, 1, 4096);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    value = ret;\n  } else {\n    return Error(`Missing arg2`);\n  }\n  return [pin, value];\n}\nexport function parsePwmClockDivider(input: any): [number] | Error {\n  let ret = null, value: number | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    ret = validInteger(input.arg1, 1, 4096);\n  } else {\n    return Error(`Missing arg1`);\n  }\n  if(ret instanceof Error) {\n    return ret;\n  }\n  value = ret;\n  return [value];\n}\nexport function parseWriteBuf(input: any): [ValidMappedPin, Buffer] | Error {\n  let ret = null, pin: ValidMappedPin | null = null, buffer: Buffer | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    ret = validPin(input.arg1);\n  } else {\n    return Error(`Missing arg1`);\n  }\n  if(ret instanceof Error) {\n    return ret;\n  }\n  pin = ret;\n  if(input.arg2 !== undefined) {\n    const ret = validBase64Buffer(input.arg2, 1, 10000);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    buffer = ret;\n  } else {\n    return Error(`Missing arg2`);\n  }\n  return [pin, buffer];\n}\nexport function parseReadBuf(input: any): [ValidMappedPin, Buffer] | Error {\n  let ret = null, pin: ValidMappedPin | null = null, buffer: Buffer | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    ret = validPin(input.arg1);\n  } else {\n    return Error(`Missing arg1`);\n  }\n  if(ret instanceof Error) {\n    return ret;\n  }\n  pin = ret;\n  if(input.arg2 !== undefined) {\n    const ret = validInteger(input.arg2, 1, 10000);\n    if(ret instanceof Error) {\n      return ret;\n    }\n    buffer = Buffer.alloc(ret);\n  } else {\n    return Error(`Missing arg2`);\n  }\n  return [pin, buffer];\n}\nexport function parseRead(input: any): [ValidMappedPin] | Error {\n  let ret = null, pin: ValidMappedPin | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    ret = validPin(input.arg1);\n  } else {\n    return Error(`Missing arg1`);\n  }\n  if(ret instanceof Error) {\n    return ret;\n  }\n  pin = ret;\n  return [pin];\n}\nexport function parseLed(input: any): [ValidLedPin, PinOutputValueRPIO] | Error {\n  let ret = null, pin: ValidLedPin | null = null, output: PinOutputValueRPIO | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    ret = validLed(input.arg1);\n  } else {\n    return Error(`Missing arg1`);\n  }\n  if(ret instanceof Error) {\n    return ret;\n  }\n  pin = ret;\n  if(input.arg2 !== undefined) {\n    ret = validOutput(input.arg2);\n  } else {\n    return Error(`Missing arg2`);\n  }\n  if(ret instanceof Error) {\n    return ret;\n  }\n  output = ret;\n  return [pin, output];\n}\nexport function parseWrite(input: any): [ValidMappedPin, PinOutputValueRPIO] | Error {\n  let ret = null, pin: ValidMappedPin | null = null, output: PinOutputValueRPIO | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    ret = validPin(input.arg1);\n  } else {\n    return Error(`Missing arg1`);\n  }\n  if(ret instanceof Error) {\n    return ret;\n  }\n  pin = ret;\n  if(input.arg2 !== undefined) {\n    ret = validOutput(input.arg2);\n  } else {\n    return Error(`Missing arg2`);\n  }\n  if(ret instanceof Error) {\n    return ret;\n  }\n  output = ret;\n  return [pin, output];\n}\nexport function parseMode(input: any): [ValidMappedPin, PinModeRPIO] | Error {\n  let ret = null, pin: ValidMappedPin | null = null, mode: PinModeRPIO | null = null, option: PinOptionRPIO | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    ret = validPin(input.arg1);\n  } else {\n    return Error(`Missing arg1`);\n  }\n  if(ret instanceof Error) {\n    return ret;\n  }\n  pin = ret;\n  if(input.arg2 !== undefined) {\n    ret = validMode(input.arg2);\n  } else {\n    return Error(`Missing arg2`);\n  }\n  if(ret instanceof Error) {\n    return ret;\n  }\n  mode = ret;\n  return [pin, mode];\n}\nexport function parsePud(input: any): [ValidMappedPin, PinInputModePullupRPIO] | Error {\n  let ret = null, pin: ValidMappedPin | null = null, mode: PinInputModePullupRPIO | null = null;\n  if(!isObject(input)) {\n    return Error(`Invalid instruction format`);\n  }\n  if(input.arg1 !== undefined) {\n    ret = validPin(input.arg1);\n  } else {\n    return Error(`Missing arg1`);\n  }\n  if(ret instanceof Error) {\n    return ret;\n  }\n  pin = ret;\n  if(input.arg2 !== undefined) {\n    ret = validInput(input.arg2);\n  } else {\n    return Error(`Missing arg2`);\n  }\n  if(ret instanceof Error) {\n    return ret;\n  }\n  mode = ret;\n  return [pin, mode];\n}\nexport function parseOpen(input: any): [ValidMappedPin, PinModeRPIO] | [ValidMappedPin, PinModeRPIO, PinOptionRPIO] | Error {\n  let ret, option: PinOptionRPIO | null = null;\n  let m = parseMode(input);\n  if(m instanceof Error) {\n    return m;\n  }\n  if(input.arg3) {\n    ret = validOption(input.arg3, m[1]);\n  } else {\n    return m;\n  }\n  if(ret instanceof Error) {\n    return ret;\n  }\n  option = ret;\n  return [...m, option];\n}\nexport function parseStored(input: any): [string] | Error {\n  let ret, name: string | null = null;\n  if(input.arg1 !== undefined) {\n    if(typeof input.arg1 === 'string' && validInstructionSetName(input.arg1)) {\n      name = input.arg1;\n    } else {\n      return new Error(`Invalid instruction set name ${input.arg1}. Make sure > 6 characters < 32.`)\n    }\n  } else {\n    return new Error(`Missing arg1`);\n  }\n  return [name];\n}\n"],"file":"parsers.js"}