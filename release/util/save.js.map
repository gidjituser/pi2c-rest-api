{"version":3,"sources":["util/save.js"],"names":["saveInstructions","instructions","name","outpath","path","join","__dirname","Promise","resolve","reject","process","env","NODE_ENV","fs","writeFile","JSON","stringify","err","genId"],"mappings":";;;;;;;;AAEA;;AACA;;;;AAGA;AACA;AACe,SAASA,gBAAT,CAA0BC,YAA1B,EAAsDC,IAAtD,EAAqF;AAClG,MAAIC,OAAO,GAAGC,cAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,MAAjC,EAAyC,cAAzC,CAAd;;AACA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC;AACA,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnCC,kBAAGC,SAAH,CAAaX,OAAb,EAAsBY,IAAI,CAACC,SAAL,CAAef,YAAf,EAA6B,IAA7B,EAAmC,IAAnC,CAAtB,EAAiEgB,GAAD,IAAS;AACtEA,QAAAA,GAAD,GAAQR,MAAM,CAACQ,GAAD,CAAd,GAAsBT,OAAO,CAACL,OAAD,CAA7B;AACD,OAFD;AAGD;AACF,GAPM,CAAP;AAQD;;AAEM,SAASe,KAAT,GAAyB;AAC9B,SAAO,CAAP;AACD","sourcesContent":["// @flow\n\nimport path from 'path';\nimport fs from 'fs';\nimport type { Instructions } from '../types'\n\n// use a Flow type import to get our Produce type\n//\nexport default function saveInstructions(instructions: Instructions, name: string): Promise<string> {\n  let outpath = path.join(__dirname, '..', '..', 'data', 'produce.json');\n  return new Promise((resolve, reject) => {\n    // lets not write to the file if we're running tests\n    if (process.env.NODE_ENV !== 'test') {\n      fs.writeFile(outpath, JSON.stringify(instructions, null, '\\t'), (err) => {\n        (err) ? reject(err) : resolve(outpath);\n      });\n    }\n  });\n}\n\nexport function genId(): number {\n  return 0;\n}\n"],"file":"save.js"}