{"version":3,"sources":["routers/GeneralRouter.js"],"names":["debug","require","util","path","exec","promisify","asyncMiddleware","fn","req","res","next","Promise","resolve","catch","isObject","obj","Object","parseSettings","input","retObj","Error","name","undefined","length","password","webURL","GeneralRouter","constructor","settings","generalHandler","status","json","received","body","code","message","logger","error","succ","updateGeneralSettings","success","version","router","init","post","get","getGeneralSettings","getVersion"],"mappings":"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","sourcesContent":["// @flow\nimport type { $Request, $Response, NextFunction }  from 'express';\nimport { Router }  from 'express';\nconst debug = require('debug')('wifi:router');\nimport generalHandler from '../GeneralHandler'\nconst util = require('util');\nconst path = require('path');\nconst exec = util.promisify(require('child_process').exec);\n\nconst asyncMiddleware = fn =>\n  (req : $Request, res : $Response, next: NextFunction) => {\n    Promise.resolve(fn(req, res, next))\n      .catch(next);\n  };\n\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\nfunction parseSettings(input: any): {password?: string, name?: string, webURL?: string} | Error {\n  let retObj = {};\n  if(!isObject(input)) {\n    return Error(`Invalid settings object. Need {\"name\": \"Some name\", \"password\": \"wifi passphrase\"}`);\n  }\n  if(input.name !== undefined && typeof input.name === 'string') {\n    if(input.name.length > 32 || input.name.length < 5) {\n      return Error(`Invalid name length. Should be < 33 and > 4`);\n    }\n    retObj.name = input.name;\n  }\n  if(input.password !== undefined && typeof input.password === 'string') {\n    if(input.password.length > 32 || input.password.length < 5) {\n      return Error(`Invalid password length. Should be < 33 and > 4`);\n    }\n    retObj.password = input.password;\n  }\n  if(input.webURL !== undefined && typeof input.webURL === 'string') {\n    if(input.webURL.length > 512 || input.webURL.length < 5) {\n      return Error(`Invalid webURL length. Should be < 513 and > 4`);\n    }\n    retObj.webURL = input.webURL;\n  }\n  return retObj;\n}\nexport default class GeneralRouter {\n  // these fields must be type annotated, or Flow will complain!\n  router: Router;\n  path: string;\n\n  // take the mount path as the constructor argument\n  constructor(path: string = '/api/v1') {\n    // instantiate the express.Router\n    this.router = Router();\n    this.path = path;\n    // glue it all together\n    this.init();\n  }\n\n  getGeneralSettings = asyncMiddleware(async (req, res, next) => { //(req: $Request, res: $Response): void {\n    //Do not return password\n    const {password, ...settings} = generalHandler.settings;\n    res.status(200).json(settings);\n  })\n  updateGeneralSettings = asyncMiddleware(async (req, res, next) => { //(req: $Request, res: $Response): void {\n    const received = parseSettings(req.body);\n    if(received instanceof Error) {\n      res.status(400).json({\n        code: 400,\n        message: received.message\n      });\n      logger.error('Malformed POST to settings update.');\n      return;\n    }\n    try {\n      const succ = await generalHandler.updateGeneralSettings(received);\n      if(succ) {\n        res.status(200).json({\n          success: true\n        });\n      } else {\n        res.status(200).json({\n          success: false,\n          error: { code: -2, message: 'Could not update the settings' }\n        });\n      }\n    } catch(error) {\n      res.status(200).json({\n        success: false,\n        error: {message: 'Unknown exception while updating settings', code: -1}\n      });\n    }\n  });\n  getVersion = asyncMiddleware(async (req, res, next) => { //(req: $Request, res: $Response): void {\n    res.status(200).json({\n      \"version\": generalHandler.version\n    });\n  });\n  /**\n   * Attach route handlers to their endpoints.\n   */\n  init(): void {\n    this.router.post('/general', this.updateGeneralSettings);\n    this.router.get('/general', this.getGeneralSettings);\n    this.router.get('/version', this.getVersion);\n  }\n\n}\n"],"file":"GeneralRouter.js"}