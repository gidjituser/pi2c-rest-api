{"version":3,"sources":["routers/InstructionRouter.js"],"names":["debug","require","asyncMiddleware","fn","req","res","next","Promise","resolve","catch","InstructionRouter","constructor","path","received","body","status","json","code","message","logger","error","newInstructions","instResp","instructionHandler","executeInstructions","succ","addStoredInstructionSet","params","instructionsName","success","instr","getStoredInstructionSet","log","getStoredInstructionSetLog","hasLog","list","getNamesOfInstructionSets","resp","execStoredInstructionSet","router","init","initConfig","gpiomem","mapping","process","platform","mock","rpio","post","execPost","get","getStoredList","addStored","getStored","getStoredLog","execStored"],"mappings":"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","sourcesContent":["// @flow\nimport type {Instructions, InstructionsResponse, InstructionResponse} from '../types';\nimport type { $Request, $Response, NextFunction }  from 'express';\nimport { Router }  from 'express';\nimport { parseInstructions, parseStoredInstructions, parseOpen, parseMode }\nfrom '../util/parsers';\nimport { logger } from '../logger';\nconst debug = require('debug')('instr:router');\nimport rpio from 'rpio'\nimport instructionHandler from '../InstrHandler'\n\n\nconst asyncMiddleware = fn =>\n  (req : $Request, res : $Response, next: NextFunction) => {\n    Promise.resolve(fn(req, res, next))\n      .catch(next);\n  };\n\nexport default class InstructionRouter {\n  // these fields must be type annotated, or Flow will complain!\n  router: Router;\n  path: string;\n\n  // take the mount path as the constructor argument\n  constructor(path: string = '/api/v1/instr') {\n    // instantiate the express.Router\n    this.router = Router();\n    this.path = path;\n    // glue it all together\n    this.init();\n    let initConfig = {\n      gpiomem: false,          /* Use /dev/gpiomem */\n      mapping: 'physical',    /* Use the P1-P40 numbering scheme */\n    }\n    if(process.platform === 'darwin') {\n      initConfig = {...initConfig, mock: 'raspi-3' };\n    }\n    rpio.init(initConfig);\n    //const InstructionsType = (reify: Type<Instructions>);\n    //console.log(InstructionsType.toString(true)); // No errors\n  }\n\n  execPost = asyncMiddleware(async (req, res, next) => { //(req: $Request, res: $Response): void {\n    const received:  boolean = parseInstructions(req.body);\n    if (!received) {\n      res.status(400).json({\n        code: 400,\n        message: 'Bad Request. Make sure that you submit valid Instructions.'\n      });\n      logger.error('Malformed POST to /exec.');\n      return;\n    }\n    const newInstructions = (req.body : Array<{func: string}>);\n    let instResp : InstructionsResponse = await instructionHandler.executeInstructions(newInstructions);\n    res.status(200).json(\n      instResp\n    );\n  })\n  addStored = asyncMiddleware(async (req, res, next) => { //(req: $Request, res: $Response): void {\n    const received:  boolean = parseInstructions(req.body);\n    if (!received) {\n      res.status(400).json({\n        code: 400,\n        message: 'Bad Request. Make sure that you submit valid Instructions.'\n      });\n      logger.error('Malformed POST to /stored.');\n      return;\n    }\n    const newInstructions = (req.body : Array<{func: string}>);\n    try {\n      const succ = await instructionHandler.addStoredInstructionSet(req.params.instructionsName, newInstructions);\n      res.status(200).json({\n        success: (succ) ? true : false\n      });\n    } catch(error) {\n      res.status(200).json({\n        success: false,\n        error: {message: error.message, code: -1}\n      });\n    }\n  })\n  getStored = asyncMiddleware(async (req, res, next) => { //(req: $Request, res: $Response): void {\n    try {\n      const instr = await instructionHandler.getStoredInstructionSet(req.params.instructionsName);\n      res.status(200).json(instr);\n    } catch(error) {\n      res.status(200).json([]);\n    }\n\n  });\n  getStoredLog = asyncMiddleware(async (req, res, next) => { //(req: $Request, res: $Response): void {\n    try {\n      const log = await instructionHandler.getStoredInstructionSetLog(req.params.instructionsName);\n      if(log) {\n        res.status(200).json({hasLog: true, log});\n      } else {\n        res.status(200).json({hasLog: false});\n      }\n    } catch(error) {\n      res.status(200).json(\n        {\n          hasLog: 'false',\n          error: {message: error.message, code: -1}\n        });\n    }\n\n  });\n  getStoredList = asyncMiddleware(async (req, res, next) => { //(req: $Request, res: $Response): void {\n    try {\n      const list = await instructionHandler.getNamesOfInstructionSets();\n      res.status(200).json(list);\n    } catch(error) {\n      res.status(200).json([]);\n    }\n  });\n  execStored = asyncMiddleware(async (req, res, next) => { //(req: $Request, res: $Response): void {\n    try {\n      const resp = await instructionHandler.execStoredInstructionSet(req.params.instructionsName);\n      res.status(200).json(resp);\n    } catch(error) {\n      res.status(400).json({\n        code: 400,\n        message: `Bad Request. ${error.message}.`\n      });\n    }\n\n  });\n  /**\n   * Attach route handlers to their endpoints.\n   */\n  init(): void {\n    this.router.post('/exec', this.execPost);\n    this.router.get('/stored', this.getStoredList);\n    this.router.post('/stored/:instructionsName', this.addStored);\n    this.router.get('/stored/:instructionsName', this.getStored);\n    this.router.get('/stored/:instructionsName/log', this.getStoredLog);\n    this.router.post('/stored/:instructionsName/exec', this.execStored);\n  }\n\n}\n"],"file":"InstructionRouter.js"}