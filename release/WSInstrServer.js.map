{"version":3,"sources":["WSInstrServer.js"],"names":["WebSocket","require","debug","module","exports","WSInstrServer","constructor","wsServer","setup","httpServer","Server","path","server","on","ws","request","connection","remoteAddress","logger","info","message","val","JSON","parse","received","send","stringify","code","error","newInstructions","instructionHandler","executeInstructions","then","instrResp","catch","close"],"mappings":";;AAGA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,IAAD,CAAzB;;AAEA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,UAAjB,CAAd;;AAEAE,MAAM,CAACC,OAAP,YAAiB,MAAMC,aAAN,CAAoB;AAEnCC,EAAAA,WAAW,GAAG;AAAA;;AACZ,SAAKC,QAAL,GAAgB,IAAhB;AACD;;AACDC,EAAAA,KAAK,CAACC,UAAD,EAA0B;AAC7B;AACA,SAAKF,QAAL,GAAgB,IAAIP,SAAS,CAACU,MAAd,CAAqB;AAAEC,MAAAA,IAAI,EAAE,gBAAR;AAA0BC,MAAAA,MAAM,EAAEH;AAAlC,KAArB,CAAhB;AACA,SAAKF,QAAL,CAAcM,EAAd,CAAiB,YAAjB,EAA+B,CAACC,EAAD,EAAKC,OAAL,KAAiB;AAC9C,UAAGA,OAAO,CAACC,UAAR,IAAsB,OAAOD,OAAO,CAACC,UAAR,CAAmBC,aAA1B,KAA4C,QAArE,EAA+E;AAC7EC,uBAAOC,IAAP,CAAa,6BAA4BJ,OAAO,CAACC,UAAR,CAAmBC,aAAc,EAA1E;AACD;;AACDH,MAAAA,EAAE,CAACD,EAAH,CAAM,SAAN,EAAkBO,OAAD,IAAa;AAChClB,QAAAA,KAAK,CAAE,aAAYkB,OAAQ,EAAtB,CAAL;;AACI,YAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,cAAI;AACF,kBAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAX,CAAZ;AACA,kBAAMI,QAAkB,GAAG,gCAAkBH,GAAlB,CAA3B;;AACA,gBAAI,CAACG,QAAL,EAAe;AACbV,cAAAA,EAAE,CAACW,IAAH,CAAQH,IAAI,CAACI,SAAL,CAAe;AACrBC,gBAAAA,IAAI,EAAE,GADe;AAErBP,gBAAAA,OAAO,EAAE;AAFY,eAAf,CAAR;;AAIAF,6BAAOU,KAAP,CAAa,sBAAb;;AACA;AACD;;AACD,kBAAMC,eAAe,GAAIR,GAAzB;;AACAS,kCAAmBC,mBAAnB,CAAuCF,eAAvC,EAAwDG,IAAxD,CAA6DC,SAAS,IAAI;AACxEnB,cAAAA,EAAE,CAACW,IAAH,CAAQH,IAAI,CAACI,SAAL,CAAeO,SAAf,CAAR;AACD,aAFD,EAEGC,KAFH,CAESN,KAAK,IAAI;AAChBd,cAAAA,EAAE,CAACW,IAAH,CAAQH,IAAI,CAACI,SAAL,CAAe;AACrBC,gBAAAA,IAAI,EAAE,GADe;AAErBP,gBAAAA,OAAO,EAAG,kCAAiCQ,KAAK,CAACR,OAAQ;AAFpC,eAAf,CAAR;AAID,aAPD;AAQD,WApBD,CAoBE,OAAMQ,KAAN,EAAa;AACbd,YAAAA,EAAE,CAACW,IAAH,CAAQH,IAAI,CAACI,SAAL,CAAe;AACrBC,cAAAA,IAAI,EAAE,GADe;AAErBP,cAAAA,OAAO,EAAG,wFAAuFQ,KAAK,CAACR,OAAQ;AAF1F,aAAf,CAAR;AAID;AACF,SA3BD,MA2BO;AACHN,UAAAA,EAAE,CAACW,IAAH,CAAQH,IAAI,CAACI,SAAL,CAAe;AACrBC,YAAAA,IAAI,EAAE,GADe;AAErBP,YAAAA,OAAO,EAAG,iCAAgC,OAAOA,OAAQ;AAFpC,WAAf,CAAR;AAIH;AACF,OAnCD;AAoCD,KAxCD;AAyCD;;AACDe,EAAAA,KAAK,GAAG;AACR,QAAG,KAAK5B,QAAR,EAAkB;AACjB,WAAKA,QAAL,CAAc4B,KAAd,CAAqBP,KAAD,IAAW,CAE3B,CAFJ;AAGA,WAAKrB,QAAL,GAAgB,IAAhB;AACA;AACA;;AAzDkC,CAArC","sourcesContent":["//@flow\nimport type {Instructions, InstructionsResponse, InstructionResponse} from './types';\nimport type { $Request, $Response, NextFunction }  from 'express';\nimport { parseInstructions } from './util/parsers';\nimport { logger } from './logger';\nimport instructionHandler from './InstrHandler'\n\nconst WebSocket = require('ws');\n\nconst debug = require('debug')('ws:instr');\n\nmodule.exports = class WSInstrServer {\n  wsServer: any\n  constructor() {\n    this.wsServer = null;\n  }\n  setup(httpServer: http.Server) {\n    //this.wsServer = new WebSocket.Server({ server:  port: process.env.WS_PORT || 8080 });\n    this.wsServer = new WebSocket.Server({ path: \"/ws/instr/exec\", server: httpServer });\n    this.wsServer.on('connection', (ws, request) => {\n      if(request.connection && typeof request.connection.remoteAddress === 'string') {\n        logger.info(`WS Server connection from ${request.connection.remoteAddress}`);\n      }\n      ws.on('message', (message) => {\n\t\t\t\tdebug(`WSMESSAGE ${message}`);\n        if (typeof message === 'string') {\n          try {\n            const val = JSON.parse(message);\n            const received:  boolean = parseInstructions(val);\n            if (!received) {\n              ws.send(JSON.stringify({\n                code: 400,\n                message: 'Bad Request. Make sure that you submit valid Instructions. Array of Instruction stringified' \n              }));\n              logger.error('Malformed WS message');\n              return;\n            }\n            const newInstructions = (val : Array<{func: string}>);\n            instructionHandler.executeInstructions(newInstructions).then(instrResp => {\n              ws.send(JSON.stringify(instrResp));\n            }).catch(error => {\n              ws.send(JSON.stringify({\n                code: 401,\n                message: `Could not execute instructions ${error.message}`\n              }));\n            });\n          } catch(error) {\n            ws.send(JSON.stringify({\n              code: 402,\n              message: `Bad Request. Could not parse instructions. Require array of Instruction stringified. ${error.message}`\n            }));\n          }\n        } else {\n            ws.send(JSON.stringify({\n              code: 400,\n              message: `Cannot process data with type ${typeof message}`\n            }));\n        }\n      });\n    });\n  }\n  close() {\n\t\tif(this.wsServer) {\n\t\t\tthis.wsServer.close((error) => {\n\n      });\n\t\t\tthis.wsServer = null;\n\t\t}\n  }\n}\n"],"file":"WSInstrServer.js"}