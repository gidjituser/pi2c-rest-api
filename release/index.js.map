{"version":3,"sources":["index.js"],"names":["logger","app","Api","DEFAULT_PORT","port","normalizePort","process","env","REST_PORT","server","http","createServer","express","listen","timeout","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","toString","code","console","exit","addr","address"],"mappings":"AAAA;;;AAEA;;AACA;;AACA;;AAEA;;;;;;AAWA,MAAMA,MAAM,GAAG,oBAAM,cAAN,CAAf;AACA,MAAMC,GAAQ,GAAG,IAAIC,YAAJ,EAAjB;AACA,MAAMC,YAAoB,GAAG,IAA7B;AACA,MAAMC,IAAqB,GAAGC,aAAa,CAACC,OAAO,CAACC,GAAR,CAAYC,SAAb,CAA3C,C,CACA;;AACA,MAAMC,MAAmB,GAAGC,IAAI,CAACC,YAAL,CAAkBV,GAAG,CAACW,OAAtB,CAA5B;AAEAH,MAAM,CAACI,MAAP,CAAcT,IAAd,E,CACA;AACE;AAEF;;AACAK,MAAM,CAACK,OAAP,GAAiB,IAAjB;AAEAL,MAAM,CAACM,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAP,MAAM,CAACM,EAAP,CAAU,WAAV,EAAuBE,WAAvB;;AAEA,SAASZ,aAAT,CAAuBa,GAAvB,EAAkD;AAChD,MAAId,IAAY,GAAI,OAAOc,GAAP,KAAe,QAAhB,GAA4BC,QAAQ,CAACD,GAAD,EAAM,EAAN,CAApC,GAAgDA,GAAnE;AAEA,MAAId,IAAI,IAAIgB,KAAK,CAAChB,IAAD,CAAjB,EAAyB,OAAOA,IAAP,CAAzB,KACK,IAAIA,IAAI,IAAI,CAAZ,EAAe,OAAOA,IAAP,CAAf,KACA,OAAOD,YAAP;AACN;;AAED,SAASa,OAAT,CAAiBK,KAAjB,EAA0C;AACxC,MAAIA,KAAK,CAACC,OAAN,KAAkB,QAAtB,EAAgC,MAAMD,KAAN;AAChC,MAAIE,IAAY,GAAI,OAAOnB,IAAP,KAAgB,QAAjB,GAA8B,QAAOA,IAAK,EAA1C,GAA+C,QAAOA,IAAI,CAACoB,QAAL,EAAgB,EAAzF;;AAEA,UAAQH,KAAK,CAACI,IAAd;AACE,SAAK,QAAL;AACEC,MAAAA,OAAO,CAACL,KAAR,CAAe,GAAEE,IAAK,+BAAtB;AACAjB,MAAAA,OAAO,CAACqB,IAAR,CAAa,CAAb;AACA;;AACF,SAAK,YAAL;AACED,MAAAA,OAAO,CAACL,KAAR,CAAe,GAAEE,IAAK,oBAAtB;AACAjB,MAAAA,OAAO,CAACqB,IAAR,CAAa,CAAb;AACA;;AACF;AACE,YAAMN,KAAN;AAVJ;AAYD;;AAED,SAASJ,WAAT,GAA6B;AAC3B,MAAIW,IAAY,GAAGnB,MAAM,CAACoB,OAAP,EAAnB;AACA,MAAIN,IAAY,GAAI,OAAOK,IAAP,KAAgB,QAAjB,GAA8B,QAAOA,IAAK,EAA1C,GAA+C,QAAOA,IAAI,CAACxB,IAAK,EAAnF;AACAJ,EAAAA,MAAM,CAAE,gBAAeuB,IAAK,EAAtB,CAAN;AACD","sourcesContent":["#!/usr/bin/env node\n// @flow\nimport * as http from 'http';\nimport debug from 'debug';\nimport Api from './Api';\n\nimport fs from 'fs';\n\n\n// ErrnoError interface for use in onError\ndeclare interface ErrnoError extends Error {\n  errno?: number;\n  code?: string;\n  path?: string;\n  syscall?: string;\n}\n\nconst logger = debug('rest:startup');\nconst app: Api = new Api();\nconst DEFAULT_PORT: number = 3000;\nconst port: string | number = normalizePort(process.env.REST_PORT);\n// $FlowFixMe: express libdef issue\nconst server: http.Server = http.createServer(app.express);\n\nserver.listen(port);\n//server.setTimeout(3000, function () {\n  //called if there was a timeout\n\n//});\nserver.timeout = 3000;\n\nserver.on('error', onError);\nserver.on('listening', onListening);\n\nfunction normalizePort(val: any): number | string {\n  let port: number = (typeof val === 'string') ? parseInt(val, 10) : val;\n\n  if (port && isNaN(port)) return port;\n  else if (port >= 0) return port;\n  else return DEFAULT_PORT;\n}\n\nfunction onError(error: ErrnoError): void {\n  if (error.syscall !== 'listen') throw error;\n  let bind: string = (typeof port === 'string') ? `Pipe ${port}` : `Port ${port.toString()}`;\n\n  switch (error.code) {\n    case 'EACCES':\n      console.error(`${bind} requires elevated privileges`);\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(`${bind} is already in use`);\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\nfunction onListening(): void {\n  let addr: string = server.address();\n  let bind: string = (typeof addr === 'string') ? `pipe ${addr}` : `port ${addr.port}`;\n  logger(`Listening on ${bind}`);\n}\n"],"file":"index.js"}