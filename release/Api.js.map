{"version":3,"sources":["Api.js"],"names":["cors","require","auth","compare","Api","constructor","express","middleware","routes","use","bodyParser","json","urlencoded","extended","req","res","next","ip","startsWith","substr","generalHandler","settings","password","length","credentials","pass","set","status","message","code","instructionRouter","InstructionRouter","generalRouter","GeneralRouter","path","router"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;AAMA;;AACA;;;;;;AANA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,YAAD,CAApB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,QAAD,CAAvB;;AAMe,MAAMG,GAAN,CAAU;AAEvB;AAGA;AACAC,EAAAA,WAAW,GAAG;AAAA;;AACZ,SAAKC,OAAL,GAAe,uBAAf;AACA,SAAKC,UAAL;AACA,SAAKC,MAAL;AACD,GAVsB,CAYvB;;;AACAD,EAAAA,UAAU,GAAS;AACjB,SAAKD,OAAL,CAAaG,GAAb,CAAiB,qBAAO,KAAP,CAAjB;AACA,SAAKH,OAAL,CAAaG,GAAb,CAAiBC,oBAAWC,IAAX,EAAjB;AACA,SAAKL,OAAL,CAAaG,GAAb,CAAiBC,oBAAWE,UAAX,CAAsB;AAACC,MAAAA,QAAQ,EAAE;AAAX,KAAtB,CAAjB;AACA,SAAKP,OAAL,CAAaG,GAAb,CAAiBT,IAAI,EAArB,EAJiB,CAKjB;;AACA,SAAKM,OAAL,CAAaG,GAAb,CAAiB,CAACK,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACnC;AACA;AACA,UAAIC,EAAE,GAAGH,GAAG,CAACG,EAAb;;AACA,UAAIH,GAAG,CAACG,EAAJ,IAAUH,GAAG,CAACG,EAAJ,CAAOC,UAAP,CAAkB,SAAlB,CAAd,EAA4C;AAC1CD,QAAAA,EAAE,GAAGH,GAAG,CAACG,EAAJ,CAAOE,MAAP,CAAc,CAAd,CAAL;AACD;;AACD,UAAGF,EAAE,KAAKA,EAAE,CAACC,UAAH,CAAc,UAAd,KAA6BD,EAAE,CAACC,UAAH,CAAc,QAAd,CAA7B,IAAwDD,EAAE,KAAK,KAA/D,IAAwEA,EAAE,KAAK,WAApF,CAAL,EAAuG;AACrGD,QAAAA,IAAI;AACJ;AACD;;AACD,UAAGI,wBAAeC,QAAf,CAAwBC,QAAxB,CAAiCC,MAAjC,KAA4C,CAA5C,IAAiDH,wBAAeC,QAAf,CAAwBC,QAAxB,KAAqC,MAAzF,EAAiG;AAC/FN,QAAAA,IAAI;AACJ;AACD;;AACD,YAAMQ,WAAW,GAAGtB,IAAI,CAACY,GAAD,CAAxB;;AACA,UAAG,CAACU,WAAD,IAAgB,CAACA,WAAW,CAACC,IAA7B,IAAqC,OAAOD,WAAW,CAACC,IAAnB,KAA4B,QAAjE,IAA6E,CAACtB,OAAO,CAACqB,WAAW,CAACC,IAAb,EAAmBL,wBAAeC,QAAf,CAAwBC,QAA3C,CAAxF,EAA8I;AAC5IP,QAAAA,GAAG,CAACW,GAAJ,CAAQ,kBAAR,EAA4B,mBAA5B,EAD4I,CAC3F;;AACjDX,QAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBhB,IAAhB,CAAqB;AAACiB,UAAAA,OAAO,EAAC,mCAAT;AAA8CC,UAAAA,IAAI,EAAE;AAApD,SAArB,EAF4I,CAE/D;;AAC7E;AACD;;AACDb,MAAAA,IAAI;AACL,KAtBD;AAuBD,GA1CsB,CA2CvB;;;AACAR,EAAAA,MAAM,GAAS;AACb;AACA,UAAMsB,iBAAiB,GAAG,IAAIC,0BAAJ,EAA1B;AACA,UAAMC,aAAa,GAAG,IAAIC,sBAAJ,EAAtB,CAHa,CAIb;;AACA,SAAK3B,OAAL,CAAaG,GAAb,CAAiBqB,iBAAiB,CAACI,IAAnC,EAAyCJ,iBAAiB,CAACK,MAA3D;AACA,SAAK7B,OAAL,CAAaG,GAAb,CAAiBuB,aAAa,CAACE,IAA/B,EAAqCF,aAAa,CAACG,MAAnD;AACD;;AAnDsB","sourcesContent":["// @flow\n\nimport express from 'express';\nimport morgan from 'morgan';\nimport bodyParser from 'body-parser';\nimport generalHandler from './GeneralHandler'\nconst cors = require('cors');\nconst auth = require('basic-auth');\nconst compare = require('tsscmp')\n\n\nimport InstructionRouter from './routers/InstructionRouter';\nimport GeneralRouter from './routers/GeneralRouter';\n\nexport default class Api {\n\n  // annotate with the express $Application type\n  express: express$Application;\n\n  // create the express instance, attach app-level middleware, attach routers\n  constructor() {\n    this.express = express();\n    this.middleware();\n    this.routes();\n  }\n\n  // register middlewares\n  middleware(): void {\n    this.express.use(morgan('dev'));\n    this.express.use(bodyParser.json());\n    this.express.use(bodyParser.urlencoded({extended: false}));\n    this.express.use(cors());\n    // $FlowFixMe: express libdef issue\n    this.express.use((req, res, next) => {\n      //If localhost or link local allow without authorization header (Authorization: Basic <_base64_token_>)\n      // <_base64_token_> is username:password in base64 format\n      let ip = req.ip;\n      if (req.ip && req.ip.startsWith('::ffff:')) {\n        ip = req.ip.substr(7);\n      }\n      if(ip && (ip.startsWith('169.254.') || ip.startsWith('fe80::') || ip === '::1' || ip === '127.0.0.1')) {\n        next();\n        return;\n      }\n      if(generalHandler.settings.password.length === 0 || generalHandler.settings.password === 'none') {\n        next();\n        return;\n      }\n      const credentials = auth(req);\n      if(!credentials || !credentials.pass || typeof credentials.pass !== 'string' || !compare(credentials.pass, generalHandler.settings.password)) {\n        res.set('WWW-Authenticate', 'Basic realm=\"401\"') // change this\n        res.status(401).json({message:'Password Authentication required.', code: 4}) // custom message\n        return\n      }\n      next()\n    })\n  }\n  // connect resource routers\n  routes(): void {\n    // create an instance of ProduceRouter\n    const instructionRouter = new InstructionRouter();\n    const generalRouter = new GeneralRouter();\n    // attach it to our express app\n    this.express.use(instructionRouter.path, instructionRouter.router);\n    this.express.use(generalRouter.path, generalRouter.router);\n  }\n\n}\n"],"file":"Api.js"}