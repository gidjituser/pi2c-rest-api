{"version":3,"sources":["GeneralHandler.js"],"names":["debug","require","util","writeFile","promisify","packageVersion","version","GeneralHandler","constructor","dbPath","process","env","DB_PATH","mkdirp","sync","dbGeneralKeyId","APP_VERSION","settings","webURL","password","name","db","PouchDB","path","join","setup","then","catch","err","gen","get","error","put","_id","subErr","updateGeneralSettings","newSettings","obj","newObj","doc","_rev","generalHandler"],"mappings":"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","sourcesContent":["//@flow\n\nimport { logger } from './logger';\nimport PouchDB from 'pouchdb';\nimport mkdirp from 'mkdirp';\nimport path from 'path';\n\nconst debug = require('debug')('gen:handler');\nconst util = require('util');\nconst writeFile = util.promisify(require('fs').writeFile);\nconst packageVersion = require('../package.json').version;\n\nexport class GeneralHandler {\n  db: PouchDB;\n  version: string;\n  settings: {\n    password: string,\n    webURL: string,\n    name: string\n  }\n  dbGeneralKeyId: string\n  constructor() {\n    const dbPath = process.env.DB_PATH || '/data/db'\n    mkdirp.sync(dbPath);\n    this.dbGeneralKeyId = `generalConfig`;\n    this.version = process.env.APP_VERSION || packageVersion;\n    this.settings = {\n      webURL: \"\",\n      password: \"\",\n      name: \"\"\n    }\n    this.db = new PouchDB(`${path.join(dbPath, 'general')}`);\n    this.setup().then(() => {\n\n    }).catch((err) => {\n\n    })\n  }\n  async setup() {\n    try {\n      const gen = await this.db.get(this.dbGeneralKeyId);\n      const {password, name, webURL} = gen;\n      this.settings = {...this.settings, password, name, webURL};\n    } catch(error) {\n      //await this.db.put({_id: this.dbGeneralKeyId, password: this.settings.password, name: this.settings.name, webURL: this.settings.webURL});\n      try {\n        await this.db.put({_id: this.dbGeneralKeyId, ...this.settings});\n      } catch(subErr) {\n        //ignore\n      }\n      //No initialize instruction set\n    }\n  }\n  async updateGeneralSettings(newSettings: {}) : Promise<boolean> {\n    const obj = {...this.settings, ...newSettings};\n    let newObj: {_id: string, _rev?: string, name: string, webURL: string, password: string} =\n      {_id: this.dbGeneralKeyId, ...obj};\n    try {\n      const doc = await this.db.get(this.dbGeneralKeyId);\n      newObj._rev = doc._rev;\n    } catch (err) {\n      //does not exist\n    }\n    try {\n      const doc = await this.db.put(newObj);\n      await this.setup();\n    } catch (err) {\n      //Ignore errors here, should still be able to work without updating instr logs\n      return false;\n      //throw new Error(`Cannot store last executed instruction set response for name ${name}`);\n    }\n    return true;\n  }\n}\nconst generalHandler = new GeneralHandler();\nexport default generalHandler;\n"],"file":"GeneralHandler.js"}